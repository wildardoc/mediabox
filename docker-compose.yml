##
## -------------------------
## |   M E D I A B O X     |
## -------------------------
##
##
## Configuration variables for this file are taken from the .env file
##
## Have docker-compose.yml and .env in the same directory to launch the stack

services:

  # ----------------------------------------
  # DELUGEVPN
  # ----------------------------------------
  arch-delugevpn:
    image: binhex/arch-delugevpn
    container_name: delugevpn
    restart: unless-stopped
    profiles: ["core", "full"]
    privileged: true
    network_mode: "bridge"
    ports:
        - '${IP_ADDRESS}:8112:8112'
        - '${IP_ADDRESS}:8118:8118'
        - '${IP_ADDRESS}:9118:9118'
        - '${IP_ADDRESS}:58846:58846'
        - '${IP_ADDRESS}:58946:58946'
        - '${IP_ADDRESS}:58946:58946/udp'
    sysctls:
        - net.ipv4.conf.all.src_valid_mark=1
    environment:
        - VPN_ENABLED=yes
        - VPN_USER=${PIAUNAME}
        - VPN_PASS=${PIAPASS}
        - VPN_PROV=pia
        - VPN_CLIENT=wireguard
        - ENABLE_STARTUP_SCRIPTS=no
        - ENABLE_PRIVOXY=yes
        - STRICT_PORT_FORWARD=yes
        - USERSPACE_WIREGUARD=no
        - ENABLE_SOCKS=yes
        - SOCKS_USER=admin
        - SOCKS_PASS=socks
        - LAN_NETWORK=${CIDR_ADDRESS}
        - NAME_SERVERS=84.200.69.80,37.235.1.174,1.1.1.1,37.235.1.177,84.200.70.40,1.0.0.1
        - DELUGE_DAEMON_LOG_LEVEL=info
        - DELUGE_WEB_LOG_LEVEL=info
        - DELUGE_ENABLE_WEBUI_PASSWORD=yes
        - VPN_INPUT_PORTS=1234
        - VPN_OUTPUT_PORTS=5678
        - DEBUG=false
        - PUID=${PUID}
        - TZ=${TZ}
        - PGID=${PGID}
    volumes:
        - '${DLDIR}:/data'
        - './delugevpn/config:/config'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8112"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ----------------------------------------
  # HOMER - Dashboard
  # ----------------------------------------
  homer:
    image: b4bz/homer:latest
    container_name: homer
    restart: unless-stopped
    profiles: ["core", "full"]
    network_mode: "bridge"
    ports:
        - '${IP_ADDRESS}:80:8080'
    environment:
        - UID=${PUID}
        - GID=${PGID}
    volumes:
        - './homer:/www/assets'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ----------------------------------------
  # LIDARR - Music Management & Automation
  # ----------------------------------------
  lidarr:
    image: lscr.io/linuxserver/lidarr
    container_name: lidarr
    restart: unless-stopped
    profiles: ["music", "full"]
    network_mode: "bridge"
    ports:
        - '${IP_ADDRESS}:8686:8686'
    environment:
        - PUID=${PUID}
        - PGID=${PGID}
        - TZ=${TZ}
        - DOCKER_MODS=linuxserver/mods:universal-package-install
        - INSTALL_PACKAGES=python3|py3-pip|ffmpeg
    volumes:
        - './lidarr:/config'
        - '${DLDIR}/completed:/data/completed'
        - '${DLDIR}/incomplete:/data/incomplete'
        - '${MUSICDIR}:/music'
        - '/etc/localtime:/etc/localtime:ro'
        - './scripts:/scripts'
        - './scripts/install-python-packages.sh:/custom-cont-init.d/install-python-packages'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8686/api/v1/system/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ----------------------------------------
  # MAINTAINERR - Plex Library Management
  # ----------------------------------------
  maintainerr:
    image: ghcr.io/jorenn92/maintainerr:latest 
    container_name: maintainerr
    user: ${PUID}:${PGID}
    profiles: ["maintenance", "full"]
    volumes:
         - './maintainerr:/opt/data'
    network_mode: 'bridge' 
    environment:
         - TZ=${TZ}
    #   - DEBUG=true # uncomment to enable debug logs
    ports:
         - '${IP_ADDRESS}:6246:6246' 
    restart: unless-stopped

  # ----------------------------------------
  # NZBGet - Usenet Downloader
  # ----------------------------------------
  nzbget:
    image: lscr.io/linuxserver/nzbget
    container_name: nzbget
    restart: unless-stopped
    profiles: ["usenet", "full"]
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    network_mode: 'bridge'
    ports:
      - '${IP_ADDRESS}:6790:6789'
    volumes:
      - './nzbget:/config'
      - '${DLDIR}:/downloads'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6789/jsonrpc/version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ----------------------------------------
  # OVERSEERR - Media Requests
  # ----------------------------------------
  overseerr:
    image: lscr.io/linuxserver/overseerr
    container_name: overseerr
    restart: unless-stopped
    profiles: ["requests", "full"]
    network_mode: "bridge"
    environment:
        - PUID=${PUID}
        - PGID=${PGID}
        - LOG_LEVEL=info
        - TZ=${TZ}
    ports:
        - ${IP_ADDRESS}:5055:5055
    volumes:
        - ./overseerr:/config
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5055/api/v1/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ----------------------------------------
  # PLEX
  # ----------------------------------------
  plex:
    container_name: plex
    image: plexinc/pms-docker:${PMSTAG}
    restart: unless-stopped
    profiles: ["plex", "monitoring", "full"]
    network_mode: "host"
    ports:
        - '${IP_ADDRESS}:32400:32400/tcp'
        - '${IP_ADDRESS}:3005:3005/tcp'
        - '${IP_ADDRESS}:8324:8324/tcp'
        - '${IP_ADDRESS}:32469:32469/tcp'
        - '${IP_ADDRESS}:1900:1900/udp'
        - '${IP_ADDRESS}:32410:32410/udp'
        - '${IP_ADDRESS}:32412:32412/udp'
        - '${IP_ADDRESS}:32413:32413/udp'
        - '${IP_ADDRESS}:32414:32414/udp'
    environment:
        - ADVERTISE_IP=http://${IP_ADDRESS}:32400/
        - ALLOWED_NETWORKS=${CIDR_ADDRESS}
        - PLEX_UID=${PUID}
        - PLEX_GID=${PGID}
        - TZ=${TZ}
    hostname: ${HOSTNAME}
    volumes:
        - './plex:/config'
        - './plex/transcode:/transcode'
        - '${MISCDIR}:/data/misc'
        - '${MOVIEDIR}:/data/movies'
        - '${MUSICDIR}:/data/music'
        - '/Storage/media/Movies_Ripped:/data/movies_ripped'
        - '${TVDIR}:/data/tvshows'
        - '${PHOTODIR}:/data/photos'

  # ----------------------------------------
  # PORTAINER - Container Management
  # ----------------------------------------
  portainer:
    image: portainer/portainer-ce
    container_name: portainer
    restart: unless-stopped
    profiles: ["maintenance", "full"]
    network_mode: "bridge"
    ports:
        - '${IP_ADDRESS}:8000:8000'
        - '${IP_ADDRESS}:9443:9443'
    environment:
        - PUID=${PUID}
        - PGID=${PGID}
        - TZ=${TZ}
    volumes:
        - './portainer:/data'
        - '/var/run/docker.sock:/var/run/docker.sock'
    command: -H unix:///var/run/docker.sock
    healthcheck:
      test: ["CMD", "curl", "-f", "-k", "https://localhost:9443/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ----------------------------------------
  # PROWLARR - Indexer Management
  # ----------------------------------------
  prowlarr:
    image: lscr.io/linuxserver/prowlarr:develop
    container_name: prowlarr
    restart: unless-stopped
    profiles: ["core", "full"]
    network_mode: "bridge"
    ports:
      - '${IP_ADDRESS}:9696:9696'
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - './prowlarr:/config'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9696/api/v1/system/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ----------------------------------------
  # RADARR - Movie Management & Automation
  # ----------------------------------------
  radarr:
    image: lscr.io/linuxserver/radarr
    container_name: radarr
    restart: unless-stopped
    profiles: ["core", "full"]
    network_mode: "bridge"
    ports:
        - '${IP_ADDRESS}:7878:7878'
    environment:
        - PUID=${PUID}
        - PGID=${PGID}
        - TZ=${TZ}
        - DOCKER_MODS=linuxserver/mods:universal-package-install
        - INSTALL_PACKAGES=python3|py3-pip|ffmpeg
    volumes:
        - './radarr:/config'
        - '${DLDIR}/completed:/data/completed'
        - '${DLDIR}/incomplete:/data/incomplete'
        - '${MOVIEDIR}:/movies'
        - './scripts:/scripts'
        - './scripts/install-python-packages.sh:/custom-cont-init.d/install-python-packages'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7878/api/v3/system/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ----------------------------------------
  # SONARR - TV Show Management & Automation
  # ----------------------------------------
  sonarr:
    image: lscr.io/linuxserver/sonarr
    container_name: sonarr
    restart: unless-stopped
    profiles: ["core", "full"]
    network_mode: "bridge"
    ports:
        - '${IP_ADDRESS}:8989:8989'
    environment:
        - PUID=${PUID}
        - PGID=${PGID}
        - TZ=${TZ}
        - DOCKER_MODS=linuxserver/mods:universal-package-install
        - INSTALL_PACKAGES=python3|py3-pip|ffmpeg
    volumes:
        - './sonarr:/config'
        - '${DLDIR}/completed:/data/completed'
        - '${DLDIR}/incomplete:/data/incomplete'
        - '${TVDIR}:/tv'
        - './scripts:/scripts'
        - './scripts/install-python-packages.sh:/custom-cont-init.d/install-python-packages'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8989/api/v3/system/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ----------------------------------------
  # TAUTULLI - Plex Usage Statistics
  # ----------------------------------------
  tautulli:
    image: tautulli/tautulli
    container_name: tautulli
    restart: unless-stopped
    profiles: ["monitoring", "plex", "full"]
    network_mode: "bridge"
    ports:
        - '${IP_ADDRESS}:8181:8181'
    environment:
        - PUID=${PUID}
        - PGID=${PGID}
        - TZ=${TZ}
    volumes:
        - './tautulli:/config'
        - './plex/Library/Application Support/Plex Media Server/Logs:/logs:ro'
    depends_on:
        - plex
